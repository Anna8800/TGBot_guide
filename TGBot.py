from telegram import (Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, InlineQueryResultArticle, InputTextMessageContent)
from telegram.ext import (Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext, InlineQueryHandler,)
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import osmnx as ox
import folium
from io import BytesIO
import requests
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# TODO: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –º—É–∑–µ–µ–≤ + –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
# TODO: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º—É–∑–µ–µ–≤ —Å –º–µ—Ç–∫–∞–º–∏ "–ø—É—à–∫–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞" ...
# TODO: —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º —Ñ—É–Ω–∫—Ü–∏–π (–ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º)

# –°–¥–µ–ª–∞–Ω–æ:
# –ø–µ—Ä–≤–∏—á–Ω–∞—è –≤–µ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç)
# inline-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º—É–∑–µ—è
# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –≥–µ–æ–º–µ—Ç–∫–µ
# –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞–∑–∞–¥
# –∫—Ä–∞—Å–æ—Ç–∞ —Ç–∏–ø–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–æ—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–≥
# \help –±–æ—Ç–∞

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7397155961:AAE5Uagw13oQlR5UnFz8wkXVCyQkU8-loy4'

CITIES = ["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–∞–º–∞—Ä–∞", "–°–∞—Ä–∞—Ç–æ–≤", "–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ", "–°–∞–Ω-–î–∏–µ–≥–æ"] # –ø—Ä–∏–º–µ—Ä—ã –≥–æ—Ä–æ–¥–æ–≤
MUSEUM_TYPES = ["–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ù–∞—É—á–Ω—ã–π", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", "–í–æ–µ–Ω–Ω—ã–π"] # –ø—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–æ–≤

start_lon, start_lat = 30.3146, 59.9398 #—ç—Ä–º–∏—Ç–∞–∂

async def start(update: Update, context: CallbackContext) -> None: # –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    context.user_data['state']='start'
    keyboard = [
        [KeyboardButton("üèô –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º")],
        [KeyboardButton("üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", request_location=True)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    if update.message:
        await update.message.reply_text("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥?", reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥?", reply_markup=reply_markup)


async def inline_query_handler(update: Update, context) -> None:
    query = update.inline_query.query.strip().lower()  
    filtered_cities = [
        city for city in CITIES if city.lower().startswith(query)
    ]
    if not filtered_cities:
        await update.inline_query.answer([])  
        return
    results = [
        InlineQueryResultArticle(
            id=str(i),
            title=city,  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            input_message_content=InputTextMessageContent(city)  # –°–∞–±–º–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
        ) for i, city in enumerate(filtered_cities)
    ]
    await update.inline_query.answer(results)  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

async def handle_city_selection(update: Update, context: CallbackContext) -> None:     # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    
    text = update.message.text
    
    if text == "üèô –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º":
         context.user_data['state'] = 'text_input'
         await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline-—Ä–µ–∂–∏–º –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: @museGuide_bot [–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞]",
                                         reply_markup=ReplyKeyboardRemove())
    
    elif text == "üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏":
        context.user_data['state'] = 'geolocation'
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥.",
                                        reply_markup=ReplyKeyboardRemove())
    
    elif context.user_data.get('state')=='text_input':
      if text in CITIES:
        await handle_city_choice(update, context)  
    
    else:
       await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")



async def handle_location(update: Update, context: CallbackContext) -> None: # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
    user_location = update.message.location
    if not user_location:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É
    latitude = user_location.latitude
    longitude = user_location.longitude

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Nominatim –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    geolocator = Nominatim(user_agent="telegram_bot")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        location = geolocator.reverse((latitude, longitude), exactly_one=True)
        address = location.raw.get("address", {})

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞
        city = address.get("city") or address.get("town") or address.get("village")
        if not city:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥.")
            return
    except GeocoderTimedOut:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–∫–æ–¥–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ.")
        return
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")
        return
    if city not in CITIES:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –º—É–∑–µ–µ–≤.")
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ
        return

    context.user_data["user_lat"] = latitude
    context.user_data["user_lon"] = longitude
    context.user_data["selected_city"] = city
    context.user_data["selected_museums"] = set()
    

    keyboard = [
        #[InlineKeyboardButton(museum, callback_data=f"museum_{museum}") for museum in MUSEUM_TYPES],
        # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ –±–ª–∏–∂–∞–π—à–∏—Ö –º—É–∑–µ–µ–≤
        [InlineKeyboardButton("üìç –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="route_to")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await update.message.reply_text(
        f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥: {city}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—É–∑–µ—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    #keyboard = [[InlineKeyboardButton(museum, callback_data=f"museum_{museum}")] for museum in MUSEUM_TYPES]
    #keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")])
    #keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    
    #await update.message.reply_text(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥: {city}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—É–∑–µ—è:", 
      #                              reply_markup=InlineKeyboardMarkup(keyboard))

async def calculate_route(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    
    try:
        await query.answer()
        user_lat = context.user_data.get("user_lat")
        user_lon = context.user_data.get("user_lon")
        city = context.user_data.get("city")

        if not user_lat or not user_lon:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.")
            return

   
        osrm_url = f"http://router.project-osrm.org/route/v1/driving/{user_lon},{user_lat};{start_lon},{start_lat}?overview=full&geometries=geojson"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OSRM
        response = requests.get(osrm_url)
        if response.status_code != 200:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ OSRM.")
            return

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        route_data = response.json()
        if route_data.get("code") != "Ok":
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞
        route_coords = route_data["routes"][0]["geometry"]["coordinates"]
        route_coords = [(lat, lon) for lon, lat in route_coords]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ (lat, lon)

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –ø–æ–º–æ—â—å—é folium
        route_map = folium.Map(location=[user_lat, user_lon], zoom_start=14)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç—É
        folium.PolyLine(route_coords, color="blue", weight=5, opacity=0.7).add_to(route_map)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ –≤–∏–¥–µ HTML
        map_html = "route_map.html"
        route_map.save(map_html)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ Telegram
        with open(map_html, "rb") as file:
            await query.message.reply_document(document=file, caption=f"–ú–∞—Ä—à—Ä—É—Ç –∏–∑ {city} –¥–æ –≠—Ä–º–∏—Ç–∞–∂–∞")

        # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–π—Ç–∏ –≤ OpenStreetMap
        osm_link = f"https://www.openstreetmap.org/directions?engine=osrm_car&route={user_lat}%2C{user_lon}%3B{start_lat}%2C{start_lon}"
        await query.message.reply_text(
            f"–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ [OpenStreetMap]({osm_link}).",
            parse_mode="Markdown"
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")

async def handle_city_choice(update: Update, context: CallbackContext) -> None: # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –º—É–∑–µ—è
 
    city = update.message.text
    if context.user_data.get('state')=='text_input':

       if city not in CITIES:
         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
         return

       context.user_data["selected_city"] = city
       context.user_data["selected_museums"] = set()

       keyboard = [[InlineKeyboardButton(museum, callback_data=f"museum_{museum}")] for museum in MUSEUM_TYPES]
       keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")])
       keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"

       await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {city}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—É–∑–µ—è:", 
                                    reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_museum_choice(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = query.data
    if "selected_museums" not in context.user_data:
        context.user_data["selected_museums"] = set()

    if data == "done":
        selected_museums = list(context.user_data.get("selected_museums", []))
        if not selected_museums:
            await query.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º—É–∑–µ—è!")
            return
        selected_city = context.user_data.get("selected_city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\nüèô –ì–æ—Ä–æ–¥: {selected_city}\nüèõ –ú—É–∑–µ–∏: {', '.join(selected_museums)}")
        return

    elif data == "back":
        await query.message.delete()
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
        return

    museum = data.split("_")[1]
    if museum in context.user_data["selected_museums"]:
        context.user_data["selected_museums"].remove(museum)
    else:
        context.user_data["selected_museums"].add(museum)

    keyboard = [[InlineKeyboardButton(f"{'‚úÖ ' if m in context.user_data['selected_museums'] else ''}{m}", callback_data=f"museum_{m}")] for m in MUSEUM_TYPES]
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])

    await query.answer()
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—É–∑–µ—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=InlineKeyboardMarkup(keyboard))



async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = (
        "ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?*\n\n"
        "1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—É–∑–µ—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä.\n\n"
        "üîô –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É *–ù–∞–∑–∞–¥*.\n"
        "üÜò –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


def main() -> None:
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city_selection))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(CallbackQueryHandler(handle_museum_choice, pattern="^(museum_|done|back)"))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(InlineQueryHandler(inline_query_handler))  
    app.add_handler(CallbackQueryHandler(calculate_route, pattern="^route_to"))

    app.run_polling()

if __name__ == '__main__':
    main()